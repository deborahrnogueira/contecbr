import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import io
import numpy as np
from fpdf import FPDF
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="An√°lise Curva ABC", layout="wide")

# Estilo do Streamlit
st.markdown("""
    <style>
    .stTabs [data-baseweb="tab-list"] {
        gap: 24px;
    }
    .stTabs [data-baseweb="tab"] {
        padding: 10px 20px;
    }
    </style>
""", unsafe_allow_html=True)

# Fun√ß√£o para validar o arquivo de entrada
@st.cache_data
def validate_file(uploaded_file):
    try:
        if uploaded_file.name.endswith('.xlsx'):
            df = pd.read_excel(uploaded_file, sheet_name='CURVA ABC')
        elif uploaded_file.name.endswith('.csv'):
            df = pd.read_csv(uploaded_file)
        else:
            df = pd.read_excel(uploaded_file)
        
        required_columns = ['Item', 'DESCRI√á√ÉO', 'UND', 'QTD', 'TOTAL']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            return False, f"Colunas ausentes: {', '.join(missing_columns)}"
        
        return True, df
    except Exception as e:
        return False, f"Erro ao ler arquivo: {str(e)}"

# Fun√ß√£o para processar os dados
@st.cache_data
def criar_curva_abc(df):
    """Cria a an√°lise da curva ABC a partir do DataFrame"""
    # Selecionar apenas as linhas relevantes
    df = df.iloc[11:310].copy()
    
    # Converter coluna TOTAL para num√©rico, tratando diferentes formatos
    df['TOTAL'] = df['TOTAL'].apply(lambda x: str(x) if pd.notnull(x) else "0")
    df['TOTAL'] = df['TOTAL'].apply(lambda x: 
        float(str(x).replace('R$', '').replace('.', '').replace(',', '.').strip())
        if isinstance(x, (str, int, float)) else 0
    )
    
    # Remover linhas com total zero ou NaN
    df = df[df['TOTAL'] > 0].reset_index(drop=True)
    
    # Ordenar por valor total em ordem decrescente
    df = df.sort_values('TOTAL', ascending=False)
    
    # Calcular percentuais
    total_geral = df['TOTAL'].sum()
    df['INCID√äNCIA DO ITEM (%)'] = (df['TOTAL'] / total_geral) * 100
    df['INCID√äNCIA ACUMULADA (%)'] = df['INCID√äNCIA DO ITEM (%)'].cumsum()
    
    # Classificar em A, B ou C
    conditions = [
        df['INCID√äNCIA ACUMULADA (%)'] <= 80,
        df['INCID√äNCIA ACUMULADA (%)'] <= 95
    ]
    choices = ['A', 'B']
    df['CLASSIFICA√á√ÉO'] = np.select(conditions, choices, default='C')
    
    # Adicionar n√∫mero do item
    df['N√öMERO DO ITEM'] = range(1, len(df) + 1)
    
    return df

# Fun√ß√£o para criar gr√°fico interativo com Plotly
def criar_grafico_interativo(df):
    # Gr√°fico de barras + linha
    fig = go.Figure()
    
    # Adicionar barras para cada classe
    cores = {'A': 'blue', 'B': 'orange', 'C': 'green'}
    for classe in ['A', 'B', 'C']:
        mask = df['CLASSIFICA√á√ÉO'] == classe
        fig.add_trace(go.Bar(
            x=df[mask]['N√öMERO DO ITEM'],
            y=df[mask]['INCID√äNCIA DO ITEM (%)'],
            name=f'Classe {classe}',
            marker_color=cores[classe],
            opacity=0.3,
            hovertemplate="<b>Item %{x}</b><br>" +
                         "Incid√™ncia: %{y:.2f}%<br>" +
                         "Classe: " + classe + "<extra></extra>"
        ))
    
    # Adicionar linha de incid√™ncia acumulada
    fig.add_trace(go.Scatter(
        x=df['N√öMERO DO ITEM'],
        y=df['INCID√äNCIA ACUMULADA (%)'],
        name='Incid√™ncia Acumulada',
        line=dict(color='red', width=2),
        hovertemplate="<b>Item %{x}</b><br>" +
                     "Incid√™ncia Acumulada: %{y:.2f}%<extra></extra>"
    ))
    
    # Adicionar linhas de refer√™ncia
    fig.add_hline(y=80, line_dash="dash", line_color="red", opacity=0.5)
    fig.add_hline(y=95, line_dash="dash", line_color="orange", opacity=0.5)
    
    fig.update_layout(
        title='Curva ABC com Distribui√ß√£o de Itens',
        xaxis_title='N√∫mero de Itens',
        yaxis_title='Incid√™ncia (%)',
        hovermode='x unified',
        showlegend=True
    )
    
    return fig

# Fun√ß√£o para criar gr√°fico de pizza
def criar_grafico_pizza(df):
    resumo = df.groupby('CLASSIFICA√á√ÉO').agg({
        'TOTAL': 'sum',
        'N√öMERO DO ITEM': 'count'
    }).reset_index()
    
    fig = px.pie(
        resumo,
        values='TOTAL',
        names='CLASSIFICA√á√ÉO',
        title='Distribui√ß√£o por Classe',
        hover_data=['N√öMERO DO ITEM'],
        labels={'N√öMERO DO ITEM': 'Quantidade de Itens'}
    )
    return fig

# Fun√ß√£o para criar heatmap
def criar_heatmap(df):
    pivot = pd.pivot_table(
        df,
        values='TOTAL',
        index='CLASSIFICA√á√ÉO',
        columns=pd.qcut(df['INCID√äNCIA DO ITEM (%)'], q=10, labels=['D1', 'D2', 'D3', 'D4', 'D5', 'D6', 'D7', 'D8', 'D9', 'D10']),
        aggfunc='sum'
    )
    
    fig = px.imshow(
        pivot,
        title='Heatmap de Concentra√ß√£o de Valores',
        labels=dict(x='Decil', y='Classifica√ß√£o', color='Valor Total')
    )
    return fig

# Fun√ß√£o para gerar PDF
def gerar_pdf(df, figs):
    pdf = FPDF()
    
    # Primeira p√°gina - Sum√°rio Executivo
    pdf.add_page()
    pdf.set_font('Arial', 'B', 16)
    pdf.cell(0, 10, 'An√°lise Curva ABC - Sum√°rio Executivo', ln=True, align='C')
    
    pdf.set_font('Arial', '', 12)
    resumo = df.groupby('CLASSIFICA√á√ÉO').agg({
        'TOTAL': ['count', 'sum'],
        'INCID√äNCIA DO ITEM (%)': 'mean'
    }).round(2)
    
    # Adicionar texto do sum√°rio
    pdf.set_font('Arial', '', 10)
    pdf.multi_cell(0, 10, f"""
    Data da an√°lise: {datetime.now().strftime('%d/%m/%Y')}
    
    Principais conclus√µes:
    - Classe A: {resumo.loc['A', ('TOTAL', 'count')]} itens, representando {resumo.loc['A', ('INCID√äNCIA DO ITEM (%)', 'mean')]}% do valor total
    - Classe B: {resumo.loc['B', ('TOTAL', 'count')]} itens, representando {resumo.loc['B', ('INCID√äNCIA DO ITEM (%)', 'mean')]}% do valor total
    - Classe C: {resumo.loc['C', ('TOTAL', 'count')]} itens, representando {resumo.loc['C', ('INCID√äNCIA DO ITEM (%)', 'mean')]}% do valor total
    """)
    
    # Adicionar gr√°ficos
    for name, fig in figs.items():
        pdf.add_page()
        pdf.set_font('Arial', 'B', 14)
        pdf.cell(0, 10, name, ln=True)
        
        # Salvar figura temporariamente
        img_path = f"temp_{name}.png"
        fig.write_image(img_path)
        pdf.image(img_path, x=10, y=30, w=190)
    
    return pdf

def main():
    # Sidebar
    with st.sidebar:
        st.title('Configura√ß√µes')
        st.markdown('### Filtros')
        
        # Placeholder para filtros
        st.markdown('#### Ser√° aplicado aos dados carregados')
    
    # Tabs principais
    tabs = st.tabs(['Upload & An√°lise', 'Visualiza√ß√µes', 'Relat√≥rio', 'Documenta√ß√£o'])
    
    with tabs[0]:
        st.title('An√°lise Curva ABC')
        
        # Upload de arquivo
        uploaded_file = st.file_uploader(
            "Carregue a planilha (Excel ou CSV)",
            type=['xlsx', 'csv', 'xls']
        )
        
        if uploaded_file is not None:
            # Validar arquivo
            is_valid, result = validate_file(uploaded_file)
            
            if not is_valid:
                st.error(result)
            else:
                df = result
                df_classificado = criar_curva_abc(df)
                
                # Interface principal
                col1, col2 = st.columns([2, 1])
                
                with col1:
                    st.subheader('Gr√°fico da Curva ABC')
                    fig_curva = criar_grafico_interativo(df_classificado)
                    st.plotly_chart(fig_curva, use_container_width=True)
                
                with col2:
                    st.subheader('Resumo da Classifica√ß√£o')
                    resumo = pd.DataFrame({
                        'Quantidade de Itens': df_classificado['CLASSIFICA√á√ÉO'].value_counts(),
                        'Total (R$)': df_classificado.groupby('CLASSIFICA√á√ÉO')['TOTAL'].sum().round(2)
                    }).reset_index()
                    resumo.columns = ['Classe', 'Quantidade de Itens', 'Total (R$)']
                    resumo['Total (R$)'] = resumo['Total (R$)'].apply(
                        lambda x: f"R$ {x:,.2f}".replace(',', 'X').replace('.', ',').replace('X', '.')
                    )
                    st.dataframe(resumo)
    
    with tabs[1]:
        if 'df_classificado' in locals():
            st.subheader('Visualiza√ß√µes Adicionais')
            
            viz_type = st.selectbox(
                'Selecione o tipo de visualiza√ß√£o',
                ['Gr√°fico de Pizza', 'Heatmap', 'Todos']
            )
            
            if viz_type in ['Gr√°fico de Pizza', 'Todos']:
                st.plotly_chart(criar_grafico_pizza(df_classificado))
            
            if viz_type in ['Heatmap', 'Todos']:
                st.plotly_chart(criar_heatmap(df_classificado))
    
    with tabs[2]:
        if 'df_classificado' in locals():
            st.subheader('Relat√≥rio')
            
            if st.button('Gerar Relat√≥rio PDF'):
                figs = {
                    'Curva ABC': fig_curva,
                    'Distribui√ß√£o por Classe': criar_grafico_pizza(df_classificado),
                    'Heatmap': criar_heatmap(df_classificado)
                }
                
                pdf = gerar_pdf(df_classificado, figs)
                
                # Salvar PDF em bytes
                pdf_output = pdf.output(dest='S').encode('latin1')
                
                st.download_button(
                    label="üì• Baixar Relat√≥rio PDF",
                    data=pdf_output,
                    file_name="relatorio_curva_abc.pdf",
                    mime="application/pdf"
                )
    
    with tabs[3]:
        st.subheader('Documenta√ß√£o')
        st.markdown("""
        ### Guia de Uso
        
        1. **Upload de Dados**
           - Formatos aceitos: Excel (.xlsx, .xls) e CSV
           - A planilha deve conter as colunas: Item, DESCRI√á√ÉO, UND, QTD, TOTAL
        
        2. **Interpreta√ß√£o dos Resultados**
           - **Classe A**: Itens mais importantes (80% do valor acumulado)
           - **Classe B**: Itens de import√¢ncia intermedi√°ria (15% do valor acumulado)
           - **Classe C**: Itens menos importantes (5% do valor acumulado)
        
        3. **Visualiza√ß√µes**
           - **Curva ABC**: Mostra a distribui√ß√£o dos itens e sua import√¢ncia relativa
           - **Gr√°fico de Pizza**: Apresenta a propor√ß√£o de cada classe
           - **Heatmap**: Indica a concentra√ß√£o de valores por decil
        
        4. **Relat√≥rio**
           - Gera um PDF completo com todas as an√°lises
           - Inclui sum√°rio executivo e recomenda√ß√µes
        """)

if __name__ == '__main__':
    main()
